ring r = QQ, (x), dp;

poly f = x2 + x + 1;
poly g = x + 3;
list l = f, g;


// SS5 prob8-a  /* */
// list l = x4 + x2 + 1, x4 - x2 - 2*x, x3 - 1;
// int k = 3;


// SS5 prob8-b
//list l = x3 + 2*x2 - x - 2, x3 - 2*x2 - x + 2, x3 - x2 - 4*x + 4;
//int k = 3;



// SS5 prob9
//list l = x3 + x2 - 4*x - 4, x3 - x2 - 4*x + 4, x3 - 2*x2 - x + 2;
//poly p = x2 - 4;



proc euclid_two(poly f, poly g){
  poly h = f;
  poly r = g;
  poly rem;
  while(r != 0){
    rem = reduce(h,r);
    h = r;
    r = rem;
  }
  return (h);
}




proc euclid(list l){
  poly h = l[1];
  int cnt = 1;
  while(cnt != size(l)){
    h = euclid_two(h, l[cnt+1]);
    cnt++;
  }
  return (h);
}



poly d = euclid(l);
simplify(d, 1);
deg(d) == 0;

//d;
//p;
//reduce(p,d);



quit;
